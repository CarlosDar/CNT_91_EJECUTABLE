import tkinter as tk
from tkinter import ttk


def crear_layout_principal(root):
    """
    Crea la estructura principal de la interfaz gr√°fica, imitando el dise√±o de la imagen proporcionada, pero con calidad visual mejorada:
    - Panel lateral azul oscuro con botones y secciones
    - Barra superior blanca con estado de conexi√≥n
    - √Årea principal de contenido en gris claro
    - Botones con efecto hover y esquinas redondeadas (simuladas)
    - Entrada de texto para el identificador del dispositivo
    """
    # Colores
    azul_lateral = '#25364a'
    azul_boton = '#2980f2'
    azul_hover = '#3a8bfd'
    gris_fondo = '#f6f7fa'
    blanco = '#ffffff'
    gris_texto = '#6c757d'
    rojo_estado = '#e74c3c'
    azul_activo = '#1c2a3a'

    # Configuraci√≥n de la ventana principal
    root.configure(bg=gris_fondo)
    root.geometry('1200x600')  # Resoluci√≥n inicial m√°s peque√±a
    root.title('CNT-91')
    root.minsize(800, 400)  # Tama√±o m√≠nimo razonable
    root.resizable(True, True)  # Permitir redimensionar libremente

    style = ttk.Style()
    style.theme_use('clam')
    # Estilo para los botones laterales
    style.configure('Sidebar.TButton',
                    font=('Segoe UI', 12),
                    foreground='white',
                    background=azul_lateral,
                    borderwidth=0,
                    focusthickness=3,
                    focuscolor=azul_boton,
                    padding=10)
    style.map('Sidebar.TButton',
              background=[('active', azul_hover), ('!active', azul_lateral)],
              relief=[('pressed', 'sunken'), ('!pressed', 'flat')])
    # Estilo para el bot√≥n principal (Conectar)
    style.configure('PrimarySidebar.TButton',
                    font=('Segoe UI', 12, 'bold'),
                    foreground='white',
                    background=azul_boton,
                    borderwidth=0,
                    focusthickness=3,
                    focuscolor=azul_boton,
                    padding=10)
    style.map('PrimarySidebar.TButton',
              background=[('active', azul_hover), ('!active', azul_boton)],
              relief=[('pressed', 'sunken'), ('!pressed', 'flat')])
    
    # Estilo para el bot√≥n de desconectar (rojo)
    style.configure('DangerSidebar.TButton',
                    font=('Segoe UI', 12, 'bold'),
                    foreground='white',
                    background='#e74c3c',
                    borderwidth=0,
                    focusthickness=3,
                    focuscolor='#c0392b',
                    padding=10)
    style.map('DangerSidebar.TButton',
              background=[('active', '#c0392b'), ('!active', '#e74c3c')],
              relief=[('pressed', 'sunken'), ('!pressed', 'flat')])

    # Panel lateral
    frame_lateral = tk.Frame(root, bg=azul_lateral, width=220)
    frame_lateral.pack(side='left', fill='y')

    # Logo y t√≠tulo
    logo = tk.Label(frame_lateral, text='‚öôÔ∏è', bg=azul_lateral, fg='white', font=('Segoe UI', 22, 'bold'))
    logo.pack(pady=(24, 0))
    titulo = tk.Label(frame_lateral, text='CNT-91', bg=azul_lateral, fg='white', font=('Segoe UI', 18, 'bold'))
    titulo.pack(pady=(0, 10))

    # Entrada de texto para el identificador del dispositivo
    label_id = tk.Label(frame_lateral, text='Identificador GPIB:', bg=azul_lateral, fg='#b0b8c1', font=('Segoe UI', 10, 'bold'))
    label_id.pack(padx=20, anchor='w')
    entry_id = ttk.Entry(frame_lateral, font=('Segoe UI', 11))
    entry_id.insert(0, 'GPIB0::10::INSTR')
    entry_id.pack(fill='x', padx=20, pady=(0, 18))

    # Bot√≥n Conectar
    btn_conectar = ttk.Button(frame_lateral, text='üîå  Conectar', style='PrimarySidebar.TButton')
    btn_conectar.pack(fill='x', padx=20, pady=(0, 10))
    
    # Variable para rastrear el estado del bot√≥n (conectado/desconectado)
    btn_conectar.estado_conectado = False

    # Separador sutil
    sep1 = tk.Frame(frame_lateral, bg='#34495e', height=2)
    sep1.pack(fill='x', padx=20, pady=(0, 10))

    # Bot√≥n Allan Deviation vs tau (antes: Configuraci√≥n)
    btn_config = ttk.Button(frame_lateral, text='Allan Deviation vs tau', style='Sidebar.TButton')
    btn_config.pack(fill='x', padx=20, pady=(0, 10))

    # Bot√≥n Frequency Datalogger
    btn_mediciones = ttk.Button(frame_lateral, text='üìà  Frequency Datalogger', style='Sidebar.TButton')
    btn_mediciones.pack(fill='x', padx=20, pady=(0, 10))

    # Bot√≥n Informaci√≥n (icono profesional)
    btn_info = ttk.Button(frame_lateral, text='üõà  Informaci√≥n CNT-91', style='Sidebar.TButton')
    btn_info.pack(fill='x', padx=20, pady=(0, 10))

    # Simular esquinas redondeadas y efecto hover
    def on_enter(e):
        if e.widget == btn_conectar:
            if hasattr(e.widget, 'estado_conectado') and e.widget.estado_conectado:
                # Si est√° conectado, mantener estilo rojo
                e.widget.configure(style='DangerSidebar.TButton')
            else:
                # Si est√° desconectado, usar estilo azul
                e.widget.configure(style='PrimarySidebar.TButton')
        else:
            e.widget.configure(style='Sidebar.TButton')
        e.widget['cursor'] = 'hand2'
    
    def on_leave(e):
        if e.widget == btn_conectar:
            if hasattr(e.widget, 'estado_conectado') and e.widget.estado_conectado:
                # Si est√° conectado, mantener estilo rojo
                e.widget.configure(style='DangerSidebar.TButton')
            else:
                # Si est√° desconectado, usar estilo azul
                e.widget.configure(style='PrimarySidebar.TButton')
        else:
            e.widget.configure(style='Sidebar.TButton')
        e.widget['cursor'] = ''
    
    for btn in [btn_conectar, btn_config, btn_mediciones, btn_info]:
        btn.bind('<Enter>', on_enter)
        btn.bind('<Leave>', on_leave)

    # Barra superior
    frame_superior = tk.Frame(root, bg=blanco, height=50, highlightbackground='#e0e0e0', highlightthickness=1)
    frame_superior.pack(side='top', fill='x')
    frame_superior.pack_propagate(False)

    # Estado de conexi√≥n
    estado = tk.Label(frame_superior, text='Estado:  Desconectado', bg=blanco, fg=rojo_estado, font=('Segoe UI', 12, 'bold'))
    estado.pack(side='left', padx=30, pady=10)

    # √Årea principal de contenido
    frame_contenido = tk.Frame(root, bg=gris_fondo)
    frame_contenido.pack(expand=True, fill='both')

    # Retornar referencias √∫tiles para enlazar l√≥gica despu√©s
    return {
        'frame_lateral': frame_lateral,
        'entry_id': entry_id,
        'btn_conectar': btn_conectar,
        'btn_config': btn_config,
        'btn_mediciones': btn_mediciones,
        'btn_info': btn_info,
        'frame_superior': frame_superior,
        'estado': estado,
        'frame_contenido': frame_contenido
    } 

def get_info_cnt91_sections():
    """
    Devuelve la lista de secciones (t√≠tulo, texto) para la informaci√≥n del CNT-91.
    """
    return [
        ("Descripci√≥n General", """
El CNT-91 de Pendulum Instruments es un contador/temporizador/an√°lisis de modulaci√≥n de ultra alta resoluci√≥n y rendimiento, dise√±ado para cubrir todas las necesidades de medici√≥n de tiempo y frecuencia en laboratorios de I+D, producci√≥n, control de calidad y calibraci√≥n.

Est√° construido sobre una arquitectura basada en un oscilador de referencia interno de alta estabilidad, con opci√≥n de un oscilador de rubidio en la versi√≥n CNT-91R, que proporciona una excepcional estabilidad a largo plazo (t√≠picamente mejor que 5√ó10‚Åª¬π¬π/d√≠a). En ausencia de esta opci√≥n, se puede seleccionar una base de tiempo OCXO de precisi√≥n o incluso operar con una referencia externa (10 MHz).

Internamente, el equipo utiliza t√©cnicas de conteo rec√≠proco interpolado, lo que le permite lograr resoluciones de hasta 12 d√≠gitos por segundo de medici√≥n o una resoluci√≥n temporal de 50 ps en modo de intervalo de tiempo. Este principio consiste en sincronizar la medici√≥n con los flancos del evento de entrada y luego aplicar interpolaci√≥n anal√≥gica mediante carga de capacitores y posterior conversi√≥n ADC, reduciendo el error de cuantizaci√≥n a valores extremadamente bajos.

Su capacidad de medici√≥n "zero dead-time" lo hace √∫nico en su categor√≠a, permitiendo capturar secuencias continuas de datos sin p√©rdida de informaci√≥n entre muestras, incluso en aplicaciones exigentes como ADEV, TIE o detecci√≥n de glitches.
        """),
        ("Caracter√≠sticas Principales", """
‚Ä¢ Rango de frecuencia: Desde DC hasta 300 MHz (en entradas A y B).

‚Ä¢ Resoluci√≥n de tiempo: Hasta 50 ps en modo de medici√≥n de intervalo de tiempo (T.I.) y 100 ps en mediciones est√°ndar.

‚Ä¢ Resoluci√≥n de frecuencia: Hasta 12 d√≠gitos/s; 1√ó10‚Åª¬π¬π en 100 ms gracias al m√©todo de recuento rec√≠proco interpolado.

‚Ä¢ Zero-dead-time: Medici√≥n continua sin tiempo muerto, ideal para an√°lisis de estabilidad tipo ADEV, TIE y TDEV, y para capturar micro-glitches de frecuencia.

‚Ä¢ Mediciones back-to-back (BtB): Permite registrar series continuas de frecuencia o tiempo sin lag entre muestras, crucial para estudios de estabilidad.

‚Ä¢ Entradas m√∫ltiples: Dos canales principales (A y B) con ajustes de impedancia, acoplamiento, filtrado anal√≥gico y digital, y un canal C opcional (seg√∫n versi√≥n).

‚Ä¢ Modulaci√≥n Domain Analysis (TimeView‚Ñ¢): Software opcional para an√°lisis de comportamiento din√°mico de frecuencia y detecci√≥n de inestabilidades como jitter o glitch.

‚Ä¢ Interfaz GPIB y USB: Hasta 4,000 resultados/s en GPIB y 10,000 mediciones/s en bloque; compatible con modo HP53132A para integraci√≥n en sistemas existentes.

‚Ä¢ Pantalla gr√°fica LCD retroiluminada: Permite visualizar resultados, histogramas, tendencia y alertas de l√≠mite en tiempo real.

‚Ä¢ Trigger Hold-off programable: Evita falsas activaciones en presencia de rebotes o ruido.

‚Ä¢ Capacidad de timestamping continuo: Ideal para c√°lculo de ADEV, TIE, TDEV y estudios t√©rmicos o de arranque.
        """),
        ("¬øC√≥mo realiza el CNT-91 las mediciones de frecuencia?", """
El CNT-91 mide frecuencia mediante conteo rec√≠proco interpolado, una t√©cnica que ofrece mucho mayor resoluci√≥n que el conteo directo. En lugar de contar cu√°ntos ciclos de la se√±al ocurren durante un intervalo fijo de tiempo (como hacen los contadores tradicionales), el CNT-91 mide el tiempo exacto entre eventos de la se√±al de entrada con interpolaci√≥n anal√≥gica de los flancos. Luego, calcula la frecuencia como el inverso del per√≠odo medido.

Por ejemplo, para se√±ales de baja frecuencia, mide con precisi√≥n el per√≠odo de la se√±al (el tiempo entre dos flancos) y lo invierte. Para se√±ales m√°s r√°pidas, cuenta m√∫ltiples ciclos y aplica interpolaci√≥n de los flancos inicial y final, reduciendo el error.

La interpolaci√≥n se realiza en hardware, cargando un capacitor con corriente constante desde el momento del flanco de la se√±al hasta el siguiente pulso del reloj de referencia. El voltaje resultante se convierte en una medida de subintervalo con una resoluci√≥n de hasta 50 ps.

Este principio permite que la resoluci√≥n de frecuencia mejore con el tiempo de medici√≥n, sin depender directamente de la frecuencia de entrada. A modo de ejemplo:

‚Ä¢ En solo 100 ms, se alcanza una resoluci√≥n relativa de 1√ó10‚Åª¬π¬π.
‚Ä¢ Se pueden obtener 12 d√≠gitos/s para frecuencias desde Hz hasta cientos de MHz.
        """),
        ("Medici√≥n de trenes de pulsos (Pulse Trains o Burst Mode)", """
Adem√°s de las funciones tradicionales de frecuencia y per√≠odo, el CNT-91 incluye un modo especial para se√±ales moduladas por pulsos (burst signals), com√∫n en osciladores que emiten trenes de pulsos o se√±ales activadas peri√≥dicamente (como salidas sincronizadas en telecomunicaciones o GPS).

En este modo:

‚Ä¢ El equipo sincroniza la medici√≥n con la aparici√≥n del burst, ignorando el tiempo de inactividad entre bursts.

‚Ä¢ La frecuencia portadora dentro del burst se mide como si fuera una se√±al continua, sin necesidad de se√±al de armado externa.

‚Ä¢ Tambi√©n se puede medir la frecuencia de repetici√≥n del burst (PRF - Pulse Repetition Frequency).

‚Ä¢ El usuario define un retardo de sincronizaci√≥n (Sync Delay) y un n√∫mero de ciclos a medir dentro del burst. Esto permite hacer mediciones precisas dentro del burst sin errores causados por transitorios o jitter de activaci√≥n.

Este tipo de medici√≥n es vital para:

‚Ä¢ An√°lisis de comportamiento de arranque (warm-up)
‚Ä¢ Medici√≥n de estabilidad transitoria
‚Ä¢ Validaci√≥n de se√±ales disparadas por eventos externos o controladores digitales
        """),
        ("Aplicaciones", """
‚Ä¢ Mediciones de frecuencia de alta precisi√≥n: Ajuste, verificaci√≥n y caracterizaci√≥n de osciladores.

‚Ä¢ Calibraci√≥n de equipos: Est√°ndares de frecuencia, generadores, analizadores de espectro y sincronizaci√≥n de relojes.

‚Ä¢ Investigaci√≥n y desarrollo: An√°lisis de comportamiento de arranque, estabilidad a corto y largo plazo, an√°lisis de PLLs y detecci√≥n de glitches.

‚Ä¢ Control de calidad: Verificaci√≥n de par√°metros de tiempo y frecuencia seg√∫n especificaciones t√©cnicas.

‚Ä¢ Telecomunicaciones: Medici√≥n de par√°metros de wander (TIE, TDEV) en relojes s√≠ncronos de red (ej. Stratum 1 a 3).

‚Ä¢ Producci√≥n automatizada: Capacidad de medir conmutando r√°pidamente entre dispositivos (DUTs), detecci√≥n de DUTs fallidos en 10 ms, y modo de presentaci√≥n con l√≠mites de aceptaci√≥n visuales.

‚Ä¢ Medici√≥n de estabilidad a corto plazo (ADEV): C√°lculo autom√°tico de œÉ·µß(œÑ) hasta 5000 s usando timestamping continuo.
        """)
    ]

def get_info_cnt91_resources():
    """
    Devuelve la lista de recursos oficiales (icono, texto, url) para la informaci√≥n del CNT-91.
    """
    return [
        ('\u2197', 'P√°gina del Producto Pendulum', 'https://pendulum-instruments.com/products/frequency-counters-analyzers/cnt-91-91r/'),
        ('\U0001F4C4', 'Datasheet', 'https://pendulum-instruments.com/wp-content/uploads/2022/05/pendulum-cnt-91-91r_timer-counter-analyzer-calibrator.pdf'),
        ('\U0001F4D6', 'Manual de Usuario', 'https://pendulum-instruments.com/wp-content/uploads/2022/05/pendulum-cnt-91-91r_timer-counter-analyzer-calibrator.pdf'),
        ('\U0001F4BB', 'Manual de Programador', 'https://pendulum-instruments.com/wp-content/uploads/2022/05/CNT-90ph.pdf'),
    ] 